plugins {
    id 'groovy'
    id 'java'
    id 'checkstyle'
    id 'com.diffplug.gradle.spotless' version '3.27.1'
    id 'jacoco'
    id 'distribution'
    id 'com.github.kt3k.coveralls' version '2.10.2'
}

group 'tokyo.northside'
version '1.0-SNAPSHOT'

repositories {
    maven {
        url "https://dl.bintray.com/omegat-org/maven/"
    }
    jcenter()
}

dependencies {
    compile 'org.slf4j:slf4j-api:1.7.25'
    compile 'org.apache.httpcomponents.client5:httpclient5:5.0.3'
    // JSON and YAML parser
    compile 'com.fasterxml.jackson.core:jackson-core:2.12.0'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.12.0'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.12.0'
    compileOnly 'org.omegat:omegat:5.2.0'
    compileOnly 'commons-io:commons-io:2.5'
    compileOnly 'commons-lang:commons-lang:2.6'
    // Test with Groovy JUnit5
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.0.0'
    testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.0.0'
    testImplementation 'commons-io:commons-io:2.5'
    testImplementation 'org.omegat:omegat:5.2.0'
    testImplementation "org.codehaus.groovy:groovy-all:3.0.1"
}

jacoco {
    toolVersion = '0.8.6'
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

spotless {
    enforceCheck false
    java {
        removeUnusedImports()
    }
}

task changedOnBranch {
    description = 'List files that have been modified on this git branch.'
    doLast {
        ext.files = project.files(gitModifiedFiles())
        ext.files.each { println(it) }
    }
}

task spotlessChangedApply {
    description = 'Apply code formatting to files that have been changed on the current branch.'
    finalizedBy 'spotlessApply'
    dependsOn changedOnBranch
    doFirst {
        spotlessJava.target = changedOnBranch.files.findAll {
            it.path.endsWith('.java')
        }
    }
}

coveralls {
    jacocoReportPath 'build/reports/jacoco/test/jacocoTestReport.xml'
}

jar {
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
    manifest {
        attributes("OmegaT-Plugins": "tokyo.northside.omegat.OnlineDictionaryPlugin")
    }
}
artifacts {
    archives jar
}

distTar {
  compression = Compression.GZIP
}

distributions {
    main {
        contents {
            from(jar)
            from('README.md', 'CHANGELOG.md', 'COPYING')
        }
    }
}
